{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"quickhttp","text":"<p><code>quickhttp</code> is a lightweight CLI that wraps Python's <code>http.server</code> with automatic port-finding and automatic shutdown after a configurable idle duration.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Automatically finds and uses an available port.</li> <li>Has a keep-alive time after which it will shut down automatically if no requests are received, in case you forget about it.</li> <li>More secure default of <code>127.0.0.1</code> (<code>localhost</code>) instead of <code>0.0.0.0</code>.</li> <li>Easier to type and autocomplete than <code>python -m http.server</code>.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can get <code>quickhttp</code> from PyPI. I recommend using <code>pipx</code> to manage Python command-line programs:</p> <pre><code>pipx install quickhttp\n</code></pre> <p>You can also install normally using regular <code>pip</code>:</p> <pre><code>pip install quickhttp\n</code></pre> <p>Requires Python 3.7 or higher. For Python 3.6, install v1.0.0.</p>"},{"location":"#development-version","title":"Development Version","text":"<p>To install the development version of this program, get it directly from GitHub.</p> <pre><code>pipx install git+https://github.com/jayqi/quickhttp.git\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<pre><code>quickhttp --help\n</code></pre> <pre><code>Usage: quickhttp [OPTIONS] [DIRECTORY]\n\n  Lightweight CLI that wraps Python's `http.server` with automatic port-\n  finding and shutdown.\n\nArguments:\n  [DIRECTORY]  Directory to serve.  [default: .]\n\nOptions:\n  -t, --timeout TEXT              Time to keep server alive for after most\n                                  recent request. Accepts time expressions\n                                  parsable by pytime parse, such as '10m' or\n                                  '10:00'.  [default: 10m]\n\n  -b, --bind TEXT                 Address to bind server to. '127.0.0.1' (or\n                                  'localhost') will only be accessible from\n                                  this computer. '0.0.0.0' is all interfaces\n                                  (IP addresses) on this computer, meaning\n                                  that it can be accessible by other computers\n                                  at your IP address.  [default: 127.0.0.1]\n\n  -p, --port INTEGER              Port to use. If None (default), will\n                                  automatically search for an open port using\n                                  the other port-related options. If\n                                  specified, ignores other port-related\n                                  options.\n\n  --port-range-min INTEGER        Minimum of range to search for an open port.\n                                  [default: 8000]\n\n  --port-range-max INTEGER        Maximum of range to search for an open port.\n                                  [default: 8999]\n\n  --port-max-tries INTEGER        Maximum number of ports to check.  [default:\n                                  50]\n\n  --port-search-type [sequential|random]\n                                  Type of search to use.  [default:\n                                  sequential]\n\n  --version                       Show version and exit.\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"#why-use-quickhttp","title":"Why use <code>quickhttp</code>?","text":"<ul> <li><code>python -m http.server</code> is a pain to type. <code>quickhttp</code> is shorter and can autocomplete. (But you can still do <code>python -m quickhttp</code> too if you really want to.)</li> <li>If you try starting <code>python -m http.server</code> and port 8000 is unavailable, you get <code>OSError: [Errno 48] Address already in use</code>. Then you have to choose another port and try again. <code>quickhttp</code> deals with ports automatically for you.</li> <li><code>quickhttp</code> will automatically shutdown after the keep-alive time expires. This defaults to 10 minutes. I often start up an HTTP server to look at something, then open a new tab to continue doing things, and then I forget about the server.</li> <li><code>python -m http.server</code> defaults to 0.0.0.0, which may make your server accessible to other people at your computer's IP address. This is a security vulnerability, but isn't necessarily obvious to people who just want to quickly serve some static files.</li> </ul>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#v200-2023-02-11","title":"v2.0.0 - 2023-02-11","text":"<ul> <li>Removed support for Python 3.6.</li> <li>Removed <code>DirectoryHTTPRequestHandler</code> which was only needed for Python 3.6.</li> </ul>"},{"location":"changelog/#v100-2021-09-06","title":"v1.0.0 - 2021-09-06","text":"<ul> <li>Changed module organization of package code to be more clear and explicit:<ul> <li>Changed name of <code>quickhttp.core</code> to <code>quickhttp.http_server</code>.</li> <li>Changed name of <code>quickhttp.quickhttp</code> to <code>quickhttp.cli</code>.</li> <li>Added new <code>quickhttp.exceptions</code> module for all package custom exceptions:<ul> <li>Added new base exception class <code>QuickhttpException</code> that all other exceptions from this package subclass.</li> <li>Added new exception class <code>InvalidSearchTypeError</code>.</li> <li>Changed name of <code>NoAvailablePortFound</code> to <code>NoAvailablePortFoundError</code>. It is now a subclass of <code>QuickhttpException</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"changelog/#v020-2020-11-21","title":"v0.2.0 - 2020-11-21","text":"<ul> <li>Changed <code>--time</code> option name to <code>--timeout</code>.</li> <li>Changed timeout time to be from last request instead of from server startup.</li> </ul>"},{"location":"changelog/#v010-2020-07-16","title":"v0.1.0 - 2020-07-16","text":"<ul> <li>Initial release. :sparkles:</li> </ul>"},{"location":"api-reference/exceptions/","title":"quickhttp.exceptions","text":"<p>Documentation for <code>quickhttp.exceptions</code> module.</p>"},{"location":"api-reference/exceptions/#quickhttp.exceptions-classes","title":"Classes","text":""},{"location":"api-reference/exceptions/#quickhttp.exceptions.InvalidSearchTypeError","title":"<code>InvalidSearchTypeError</code>","text":"<p>         Bases: <code>QuickhttpException</code>, <code>ValueError</code></p> Source code in <code>quickhttp/exceptions.py</code> <pre><code>class InvalidSearchTypeError(QuickhttpException, ValueError):\n    pass\n</code></pre>"},{"location":"api-reference/exceptions/#quickhttp.exceptions.NoAvailablePortFoundError","title":"<code>NoAvailablePortFoundError</code>","text":"<p>         Bases: <code>QuickhttpException</code></p> Source code in <code>quickhttp/exceptions.py</code> <pre><code>class NoAvailablePortFoundError(QuickhttpException):\n    pass\n</code></pre>"},{"location":"api-reference/exceptions/#quickhttp.exceptions.QuickhttpException","title":"<code>QuickhttpException</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base exception for all quickhttp custom exceptions.</p> Source code in <code>quickhttp/exceptions.py</code> <pre><code>class QuickhttpException(Exception):\n\"\"\"Base exception for all quickhttp custom exceptions.\"\"\"\n</code></pre>"},{"location":"api-reference/http_server/","title":"quickhttp.http_server","text":"<p>Documentation for <code>quickhttp.http_server</code> module.</p>"},{"location":"api-reference/http_server/#quickhttp.http_server-attributes","title":"Attributes","text":""},{"location":"api-reference/http_server/#quickhttp.http_server.DEFAULT_PORT_MAX_TRIES","title":"<code>DEFAULT_PORT_MAX_TRIES: int = 50</code>  <code>module-attribute</code>","text":"<p>Default maximum number of search attempts for an open port.</p>"},{"location":"api-reference/http_server/#quickhttp.http_server.DEFAULT_PORT_RANGE_MAX","title":"<code>DEFAULT_PORT_RANGE_MAX: int = 8999</code>  <code>module-attribute</code>","text":"<p>Default maximum of open port search range.</p>"},{"location":"api-reference/http_server/#quickhttp.http_server.DEFAULT_PORT_RANGE_MIN","title":"<code>DEFAULT_PORT_RANGE_MIN: int = 8000</code>  <code>module-attribute</code>","text":"<p>Default minimum of open port search range.</p>"},{"location":"api-reference/http_server/#quickhttp.http_server.DEFAULT_PORT_SEARCH_TYPE","title":"<code>DEFAULT_PORT_SEARCH_TYPE: SearchType = SearchType.sequential</code>  <code>module-attribute</code>","text":"<p>Default type of search for <code>find_available_port</code>. See <code>SearchType</code>.</p>"},{"location":"api-reference/http_server/#quickhttp.http_server-classes","title":"Classes","text":""},{"location":"api-reference/http_server/#quickhttp.http_server.SearchType","title":"<code>SearchType</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>Enum. Available types of search for <code>find_available_port</code>.</p> <p>Attributes:</p> Name Type Description <code>sequential</code> <p>Search ports sequentially in ascending order, starting with range_min.</p> <code>random</code> <p>Search ports randomly within the interval [range_min, range_max].</p> Source code in <code>quickhttp/http_server.py</code> <pre><code>class SearchType(str, Enum):\n\"\"\"Enum. Available types of search for\n    [`find_available_port`][quickhttp.http_server.find_available_port].\n\n    Attributes:\n        sequential: Search ports sequentially in ascending order, starting with range_min.\n        random: Search ports randomly within the interval [range_min, range_max].\n    \"\"\"\n\n    sequential = \"sequential\"\n    random = \"random\"\n</code></pre>"},{"location":"api-reference/http_server/#quickhttp.http_server.TimedHTTPServer","title":"<code>TimedHTTPServer</code>","text":"<p>         Bases: <code>HTTPServer</code></p> <p>Subclass of <code>http.server.HTTPServer</code> that tracks timeout status.</p> Source code in <code>quickhttp/http_server.py</code> <pre><code>class TimedHTTPServer(HTTPServer):\n\"\"\"Subclass of [`http.server.HTTPServer`](https://docs.python.org/3/library/http.server.html)\n    that tracks timeout status.\n    \"\"\"\n\n    def __init__(\n        self,\n        server_address: Tuple[str, int],\n        RequestHandlerClass: Callable[..., BaseHTTPRequestHandler],\n        timeout: int,\n    ):\n        self.timeout = timeout\n        self.timeout_reached = False\n        super().__init__(server_address=server_address, RequestHandlerClass=RequestHandlerClass)\n\n    def handle_timeout(self):\n\"\"\"Called if no new request arrives within self.timeout.\"\"\"\n        self.timeout_reached = True\n</code></pre>"},{"location":"api-reference/http_server/#quickhttp.http_server.TimedHTTPServer-functions","title":"Functions","text":""},{"location":"api-reference/http_server/#quickhttp.http_server.TimedHTTPServer.handle_timeout","title":"<code>handle_timeout()</code>","text":"<p>Called if no new request arrives within self.timeout.</p> Source code in <code>quickhttp/http_server.py</code> <pre><code>def handle_timeout(self):\n\"\"\"Called if no new request arrives within self.timeout.\"\"\"\n    self.timeout_reached = True\n</code></pre>"},{"location":"api-reference/http_server/#quickhttp.http_server-functions","title":"Functions","text":""},{"location":"api-reference/http_server/#quickhttp.http_server.find_available_port","title":"<code>find_available_port(range_min: int = DEFAULT_PORT_RANGE_MIN, range_max: int = DEFAULT_PORT_RANGE_MAX, max_tries: int = DEFAULT_PORT_MAX_TRIES, search_type: SearchType = DEFAULT_PORT_SEARCH_TYPE) -&gt; int</code>","text":"<p>Searches for an available port (not in use) on the local host.</p> <p>Parameters:</p> Name Type Description Default <code>range_min</code> <code>int</code> <p>Minimum of range to search. Defaults to DEFAULT_PORT_RANGE_MIN.</p> <code>DEFAULT_PORT_RANGE_MIN</code> <code>range_max</code> <code>int</code> <p>Maximum of range to search. Defaults to DEFAULT_PORT_RANGE_MAX.</p> <code>DEFAULT_PORT_RANGE_MAX</code> <code>max_tries</code> <code>int</code> <p>Maximum number of ports to check. Defaults to DEFAULT_PORT_MAX_TRIES.</p> <code>DEFAULT_PORT_MAX_TRIES</code> <code>search_type</code> <code>SearchType</code> <p>Type of search. See SearchType enum for valid values. Defaults to DEFAULT_PORT_SEARCH_TYPE.</p> <code>DEFAULT_PORT_SEARCH_TYPE</code> <p>Raises:</p> Type Description <code>InvalidSearchTypeError</code> <p>If search_type is invalid.</p> <code>NoAvailablePortFoundError</code> <p>If no available ports found within max_tries.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>An available port.</p> Source code in <code>quickhttp/http_server.py</code> <pre><code>def find_available_port(\n    range_min: int = DEFAULT_PORT_RANGE_MIN,\n    range_max: int = DEFAULT_PORT_RANGE_MAX,\n    max_tries: int = DEFAULT_PORT_MAX_TRIES,\n    search_type: SearchType = DEFAULT_PORT_SEARCH_TYPE,\n) -&gt; int:\n\"\"\"Searches for an available port (not in use) on the local host.\n\n    Args:\n        range_min (int, optional): Minimum of range to search. Defaults to\n            [DEFAULT_PORT_RANGE_MIN][quickhttp.http_server.DEFAULT_PORT_RANGE_MIN].\n        range_max (int, optional): Maximum of range to search. Defaults to\n            [DEFAULT_PORT_RANGE_MAX][quickhttp.http_server.DEFAULT_PORT_RANGE_MAX].\n        max_tries (int, optional): Maximum number of ports to check. Defaults to\n            [DEFAULT_PORT_MAX_TRIES][quickhttp.http_server.DEFAULT_PORT_MAX_TRIES].\n        search_type (SearchType, optional): Type of search. See\n            [SearchType][quickhttp.http_server.SearchType] enum for valid values. Defaults to\n            [DEFAULT_PORT_SEARCH_TYPE][quickhttp.http_server.DEFAULT_PORT_SEARCH_TYPE].\n\n    Raises:\n        InvalidSearchTypeError: If search_type is invalid.\n        NoAvailablePortFoundError: If no available ports found within max_tries.\n\n    Returns:\n        int: An available port.\n    \"\"\"\n    max_tries = min(max_tries, range_max - range_min + 1)\n\n    to_try: Iterable[int]\n    if search_type == SearchType.sequential:\n        to_try = islice(range(range_min, range_max + 1), max_tries)\n    elif search_type == SearchType.random:\n        to_try = random.sample(range(range_min, range_max + 1), max_tries)\n    else:\n        msg = (\n            f\"Invalid search_type {search_type}. Available options are \"\n            f\"[{'|'.join(level.value for level in SearchType)}].\"\n        )\n        raise InvalidSearchTypeError(msg)\n\n    for port in to_try:\n        if is_port_available(port=port):\n            return port\n\n    raise NoAvailablePortFoundError(\n        f\"Unable to find available port in range [{range_min}, {range_max}] with \"\n        f\"{SearchType(search_type).value} search in {max_tries} tries.\"\n    )\n</code></pre>"},{"location":"api-reference/http_server/#quickhttp.http_server.is_port_available","title":"<code>is_port_available(port: int) -&gt; bool</code>","text":"<p>Check if port is available (not in use) on the local host. This is determined by attemping to create a socket connection with that port. If the connection is successful, that means something is using the port.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>port to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>If that port is available (not in use).</p> Source code in <code>quickhttp/http_server.py</code> <pre><code>def is_port_available(port: int) -&gt; bool:\n\"\"\"Check if port is available (not in use) on the local host. This is determined by attemping\n    to create a socket connection with that port. If the connection is successful, that means\n    something is using the port.\n\n    Args:\n        port (int): port to check.\n\n    Returns:\n        bool: If that port is available (not in use).\n    \"\"\"\n    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n        if sock.connect_ex((\"127.0.0.1\", port)) == 0:\n            # Successfull connection\n            return False\n    return True\n</code></pre>"},{"location":"api-reference/http_server/#quickhttp.http_server.run_timed_http_server","title":"<code>run_timed_http_server(address: str, port: int, directory: Union[str, os.PathLike], timeout: int)</code>","text":"<p>Start a <code>TimedHTTPServer</code> with specified timeout.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>Address to bind the server to.</p> required <code>port</code> <code>int</code> <p>Port to use.</p> required <code>directory</code> <code>Union[str, os.PathLike]</code> <p>Directory to serve.</p> required <code>timeout</code> <code>int</code> <p>Time to keep server alive for, in seconds.</p> required Source code in <code>quickhttp/http_server.py</code> <pre><code>def run_timed_http_server(\n    address: str, port: int, directory: Union[str, os.PathLike], timeout: int\n):\n\"\"\"Start a [`TimedHTTPServer`][quickhttp.http_server.TimedHTTPServer] with specified timeout.\n\n    Args:\n        address (str): Address to bind the server to.\n        port (int): Port to use.\n        directory (Union[str, os.PathLike]): Directory to serve.\n        timeout (int): Time to keep server alive for, in seconds.\n    \"\"\"\n    handler = partial(SimpleHTTPRequestHandler, directory=str(directory))\n\n    with TimedHTTPServer(\n        server_address=(address, port), RequestHandlerClass=handler, timeout=timeout\n    ) as httpd:\n        try:\n            while not httpd.timeout_reached:  # type: ignore\n                httpd.handle_request()\n            typer.echo(\"Timeout reached.\")\n        except KeyboardInterrupt:\n            typer.echo(\" KeyboardInterrupt received.\")\n</code></pre>"}]}